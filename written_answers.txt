Answers for parts  1 - 5
Enter your answers in the designated location. Do NOT remove lines that start
with '=' signs. Removing these lines will break our grading scrips and will
result in 0 points. Also, keep lines to a max of 80 chars long (you do not
need to worry if the top command is longer than 80 chars). Also, please limit
your answers to about 40 words.

================================== P1Q1 start ==================================
Describe how you created the 70%/30% split. 
    - Include the command lines you executed
    - Indicate if you needed root privileges for any of those commands
    - Include the top output

    In this task, we wrote a c program called myprogram.c (in user/test/),
	in this program, we created a process and forked 10 child processes, bond
	the 10 processes to cpu2, then we set the first 5 child processes' nice 
	value to 10 and last 5 processes' nice value to 14. 

	top - 09:16:17 up 13 min,  3 users,  load average: 0.82, 0.22, 0.12
	Tasks: 179 total,  11 running, 168 sleeping,   0 stopped,   0 zombie
	%Cpu0  :   0.3/0.0     0[                                                   ]
	%Cpu1  :   0.0/0.0     0[                                                   ]
	%Cpu2  : 100.0/0.0   100[|||||||||||||||||||||||||||||||||||||||||||||||||||]
	%Cpu3  :   0.0/0.0     0[                                                   ]
	MiB Mem :   7973.6 total,   5296.2 free,    919.1 used,   1758.3 buff/cache
	MiB Swap:   8190.0 total,   8190.0 free,      0.0 used.   6744.3 avail Mem 

	PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                                                      
	1472 bateman   30  10    2276     80      0 R  14.3   0.0   0:01.27 myprogram                                                                    
	1476 bateman   30  10    2276     80      0 R  14.3   0.0   0:01.27 myprogram                                                                    
	1473 bateman   30  10    2276     80      0 R  14.0   0.0   0:01.26 myprogram                                                                    
	1474 bateman   30  10    2276     80      0 R  14.0   0.0   0:01.26 myprogram                                                                    
	1475 bateman   30  10    2276     80      0 R  14.0   0.0   0:01.26 myprogram                                                                    
	1477 bateman   34  14    2276     80      0 R   6.0   0.0   0:00.52 myprogram                                                                    
	1480 bateman   34  14    2276     80      0 R   6.0   0.0   0:00.52 myprogram                                                                    
	1478 bateman   34  14    2276     80      0 R   5.7   0.0   0:00.51 myprogram                                                                    
	1479 bateman   34  14    2276     80      0 R   5.7   0.0   0:00.51 myprogram                                                                    
	1481 bateman   34  14    2276     80      0 R   5.7   0.0   0:00.51 myprogram                                                                    
		1 root      20   0  169468  10080   7804 S   0.0   0.1   0:00.87 systemd                                                                      
		2 root      20   0       0      0      0 S   0.0   0.0   0:00.00 kthreadd


=================================== P1Q1 end ===================================

================================== P1Q2 start ==================================
Describe how you created a real-time priority task.
    - Include the command lines you executed
    - Indicate if you needed root privileges for any of those commands
    - Include the top output

    In this task, we modified the task1's program into myprogramp2.c: we add another
	child process, i.e. 11st child process, the first 10 child processes remained 
	the same. In the last child process, we changed the scheduler policy to 
	SCHED_FIFO and set the sched_priority to max: 99. Finally, we ran the myprogramp2 with
	sudo: sudo ./myprogramp2.

	top - 09:27:36 up 24 min,  3 users,  load average: 10.71, 9.76, 5.70
	Tasks: 180 total,  14 running, 166 sleeping,   0 stopped,   0 zombie
	%Cpu0  :   0.0/0.0     0[                                                        ]
	%Cpu1  :   0.3/0.0     0[                                                        ]
	%Cpu2  : 100.0/0.0   100[||||||||||||||||||||||||||||||||||||||||||||||||||||||||]
	%Cpu3  :   0.0/0.0     0[                                                        ]
	MiB Mem :   7973.6 total,   5283.2 free,    930.3 used,   1760.0 buff/cache
	MiB Swap:   8190.0 total,   8190.0 free,      0.0 used.   6732.7 avail Mem 

	PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                                                      
	8348 root      20   0    2276    736    676 S   0.0   0.0   0:00.00 ./myprogramp2                                                                
	8349 root      30  10    2276     76      0 R   0.0   0.0   0:00.00 ./myprogramp2                                                                
	8350 root      30  10    2276     76      0 R   0.0   0.0   0:00.00 ./myprogramp2                                                                
	8351 root      30  10    2276     76      0 R   0.0   0.0   0:00.00 ./myprogramp2                                                                
	8352 root      30  10    2276     76      0 R   0.0   0.0   0:00.00 ./myprogramp2                                                                
	8353 root      20   0    2276     76      0 R   0.0   0.0   0:00.00 ./myprogramp2                                                                
	8354 root      20   0    2276     76      0 R   0.0   0.0   0:00.00 ./myprogramp2                                                                
	8355 root      20   0    2276     76      0 R   0.0   0.0   0:00.00 ./myprogramp2                                                                
	8356 root      20   0    2276     76      0 R   0.0   0.0   0:00.00 ./myprogramp2                                                                
	8357 root      20   0    2276     76      0 R   0.0   0.0   0:00.00 ./myprogramp2                                                                
	8358 root      34  14    2276     76      0 R   0.0   0.0   0:00.00 ./myprogramp2                                                                
	8359 root      rt   0    2276     76      0 R 100.0   0.0   1:04.97 ./myprogramp2  

=================================== P1Q2 end ===================================



================================== P2Q1 start ==================================
The output of diff or diffconfig when comparing the config files for your 
mainline fallback kernel and your MuQSS kernel

    /* TODO */

=================================== P2Q1 end ===================================

================================== P2Q2 start ==================================
Indicate you successfully patched, built, and booted into your MuQSS-enabled 
Linux kernel.

    /* TODO */ 

=================================== P2Q2 end ===================================



================================== P3Q1 start ==================================
Describe how you created the 70%/30% split. 
    - Include the command lines you executed
    - Indicate if you needed root privileges for any of those commands
    - How were the results different from P1Q1, if at all.

    /* TODO */

=================================== P3Q1 end ===================================

================================== P3Q2 start ==================================
Describe how you created a real-time priority task. 
    - Include the command lines you executed
    - Indicate if you needed root privileges for any of those commands
    - How were the results different from P1Q2, if at all.

    /* TODO */ 

=================================== P3Q2 end ===================================

================================== P3Q3 start ==================================
MuQSS features unprivileged real-time tasks. Perform the previous task with and
without root privileges, and describe the differences. 

    /* TODO */

=================================== P3Q3 end ===================================



================================== P4Q1 start ==================================
Verify Con Kolivas' claim by timing the kernel build-time in both your fallback
and your MuQSS-patched kernels.
    
    /* TODO */ 

=================================== P4Q1 end ===================================

================================== P4Q2 start ==================================
Design an experiment that you think will highlight MuQSS’s strength. Perform 
the experiment and report your findings.

    /* TODO */ 

=================================== P4Q2 end ===================================



================================== P5Q1 start ==================================
Briefly describe the advantages and disadvantages of a larger HZ.

    /* TODO */ 

=================================== P5Q1 end ===================================

================================== P5Q2 start ==================================
What is the HZ currently configured for your running Linux system?

    /* TODO */ 

=================================== P5Q2 end ===================================

================================== P5Q3 start ==================================
What are jiffies? Explain the relationship between jiffies, HZ, and time.

    /* TODO */ 

=================================== P5Q3 end ===================================

================================== P5Q4 start ==================================
Find the current value of jiffies in your system.
    - In minutes, how much time does this jiffies value represent?
    - Does it match the uptime reported by the uptime command? (Hint: it 
      doesn’t.) Please give the formula to convert jiffies to the current 
      (real) uptime, in minutes.
    - Why does this large difference exist? (Hint: in 32-bit Linux systems,
      jiffies is a 32-bit value.)

    /* TODO */ 

=================================== P5Q4 end ===================================

================================== P5Q5 start ==================================
What are Niffies? How do they differ from Jiffies?

    /* TODO */ 

=================================== P5Q5 end ===================================