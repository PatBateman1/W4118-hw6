Answers for parts  1 - 5
Enter your answers in the designated location. Do NOT remove lines that start
with '=' signs. Removing these lines will break our grading scrips and will
result in 0 points. Also, keep lines to a max of 80 chars long (you do not
need to worry if the top command is longer than 80 chars). Also, please limit
your answers to about 40 words.

================================== P1Q1 start ==================================
Describe how you created the 70%/30% split. 
    - Include the command lines you executed
    - Indicate if you needed root privileges for any of those commands
    - Include the top output

    /* TODO */ 

=================================== P1Q1 end ===================================

================================== P1Q2 start ==================================
Describe how you created a real-time priority task.
    - Include the command lines you executed
    - Indicate if you needed root privileges for any of those commands
    - Include the top output

    /* TODO */ 

=================================== P1Q2 end ===================================



================================== P2Q1 start ==================================
The output of diff or diffconfig when comparing the config files for your 
mainline fallback kernel and your MuQSS kernel

output of diffconfig:
    -CFS_BANDWIDTH y
	-CGROUP_CPUACCT y
	-FAIR_GROUP_SCHED y
	-NUMA_BALANCING y
	-NUMA_BALANCING_DEFAULT_ENABLED y
	-RT_GROUP_SCHED n
	-SCHED_AUTOGROUP y
	+RQ_MC y
	+RQ_NONE n
	+RQ_SMP n
	+RQ_SMT n
	+SCHED_MUQSS y
	+SHARERQ 2
	+SMT_NICE y

=================================== P2Q1 end ===================================

================================== P2Q2 start ==================================
Indicate you successfully patched, built, and booted into your MuQSS-enabled 
Linux kernel.

	[    0.194489] MuQSS locality CPU 0 to 1: 2
	[    0.194491] MuQSS locality CPU 0 to 2: 2
	[    0.194491] MuQSS locality CPU 0 to 3: 2
	[    0.194492] MuQSS locality CPU 1 to 2: 2
	[    0.194493] MuQSS locality CPU 1 to 3: 2
	[    0.194494] MuQSS locality CPU 2 to 3: 2
	[    0.196027] MuQSS runqueue share type MC total runqueues: 29
	[    0.876152] MuQSS CPU scheduler v0.180 by Con Kolivas.

=================================== P2Q2 end ===================================



================================== P3Q1 start ==================================
Describe how you created the 70%/30% split. 
    - Include the command lines you executed
    - Indicate if you needed root privileges for any of those commands
    - How were the results different from P1Q1, if at all.

    By using muqss, p1 task 1's program the ratio changed slightly. In muqss,
	the ratio is roughly 65%:35%. But at first, one or two process have the whole
	cpu, and after a while, the ratio changed to 65%:35%.

	at last:
	top - 01:56:25 up  5:43,  3 users,  load average: 10.07, 10.03, 9.99
	Tasks: 178 total,  11 running, 167 sleeping,   0 stopped,   0 zombie
	%Cpu0  :   0.0/0.0     0[                                                   ]
	%Cpu1  :   0.0/0.0     0[                                                   ]
	%Cpu2  : 100.0/0.0   100[|||||||||||||||||||||||||||||||||||||||||||||||||||]
	%Cpu3  :   0.0/0.0     0[                                                   ]
	MiB Mem :   7973.6 total,   5361.6 free,    648.2 used,   1963.8 buff/cache
	MiB Swap:   8190.0 total,   8190.0 free,      0.0 used.   7012.2 avail Mem 

	PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                                                            
	3974 bateman    1   0    2276    740    680 S   0.0   0.0   0:00.00 myprogram                                                                             
	3975 bateman   10  10    2276     76      0 R  14.3   0.0  15:58.56 myprogram                                                                             
	3976 bateman   16  10    2276     76      0 R  14.3   0.0   1:22.98 myprogram                                                                             
	3977 bateman   12  10    2276     76      0 R  14.3   0.0   1:21.09 myprogram                                                                             
	3978 bateman   14  10    2276     76      0 R  14.3   0.0   1:21.75 myprogram                                                                             
	3979 bateman   15  10    2276     76      0 R  14.3   0.0   1:21.10 myprogram                                                                             
	3980 bateman   25  14    2276     76      0 R   7.0   0.0   0:40.93 myprogram                                                                             
	3981 bateman   11  14    2276     76      0 R   6.6   0.0   0:40.54 myprogram                                                                             
	3982 bateman   21  14    2276     76      0 R   7.3   0.0   2:41.15 myprogram                                                                             
	3983 bateman   16  14    2276     76      0 R   7.3   0.0   1:23.76 myprogram                                                                             
	3984 bateman   19  14    2276     76      0 R   7.0   0.0   1:23.68 myprogram
	

=================================== P3Q1 end ===================================

================================== P3Q2 start ==================================
Describe how you created a real-time priority task. 
    - Include the command lines you executed
    - Indicate if you needed root privileges for any of those commands
    - How were the results different from P1Q2, if at all.

    this part has the same behavior as part1 taks2.

=================================== P3Q2 end ===================================

================================== P3Q3 start ==================================
MuQSS features unprivileged real-time tasks. Perform the previous task with and
without root privileges, and describe the differences. 

    In this part, the last process has roughly 80% of the cpu and the first 10 processes
	share the rest of cpu.

	the output of top:
	top - 03:08:30 up  6:24,  3 users,  load average: 11.07, 11.96, 11.92
	Tasks: 186 total,  12 running, 174 sleeping,   0 stopped,   0 zombie
	%Cpu0  :   0.3/0.7     1[|                                                     ]
	%Cpu1  :   0.8/0.0     1[|                                                     ]
	%Cpu2  : 100.0/0.0   100[||||||||||||||||||||||||||||||||||||||||||||||||||||||]
	%Cpu3  :   0.4/0.0     0[                                                      ]
	MiB Mem :   7973.6 total,   4656.1 free,   1342.8 used,   1974.7 buff/cache
	MiB Swap:   8190.0 total,   8190.0 free,      0.0 used.   6317.6 avail Mem 

	PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                                                               
	4529 bateman    1   0 1109096 107880  32372 S   0.0   1.3   0:04.35 node                                                                                  
	4536 bateman    1   0  893108  57100  28360 S   0.0   0.7   0:02.89 node                                                                                  
	5499 bateman    1   0 1110976 111228  32408 S   0.7   1.4   0:02.40 node                                                                                  
	5513 bateman    1   0  892720  55960  28384 S   0.0   0.7   0:02.76 node                                                                                  
	851 bateman    1   0  368356  33040  26008 S   0.0   0.4   0:01.23 nm-applet                                                                             
	31 root       1 -20       0      0      0 I   0.0   0.0   0:00.00 netns                                                                                 
	4705 bateman    1   0    2276    744    680 S   0.0   0.0   0:00.00 myprogramp2                                                                           
	4706 bateman   10  10    2276     80      0 R   3.0   0.0   0:35.88 myprogramp2                                                                           
	4707 bateman   13  10    2276     80      0 R   3.0   0.0  12:25.06 myprogramp2                                                                           
	4708 bateman    6  10    2276     80      0 R   3.3   0.0   0:35.12 myprogramp2                                                                           
	4709 bateman   14  10    2276     80      0 R   3.0   0.0   0:23.67 myprogramp2                                                                           
	4710 bateman    3  10    2276     80      0 R   3.0   0.0   0:23.67 myprogramp2                                                                           
	4711 bateman   25  14    2276     80      0 R   1.7   0.0   0:15.12 myprogramp2                                                                           
	4712 bateman   12  14    2276     80      0 R   1.7   0.0   0:15.10 myprogramp2                                                                           
	4713 bateman   15  14    2276     80      0 R   2.0   0.0   0:15.09 myprogramp2                                                                           
	4714 bateman   18  14    2276     80      0 R   2.0   0.0   0:15.09 myprogramp2                                                                           
	4715 bateman   24  14    2276     80      0 R   2.0   0.0   0:22.26 myprogramp2                                                                           
	4716 bateman    4   0    2276     80      0 R  82.4   0.0  17:30.43 myprogramp2

=================================== P3Q3 end ===================================



================================== P4Q1 start ==================================
Verify Con Kolivas' claim by timing the kernel build-time in both your fallback
and your MuQSS-patched kernels.
    
    /* TODO */ 

=================================== P4Q1 end ===================================

================================== P4Q2 start ==================================
Design an experiment that you think will highlight MuQSS’s strength. Perform 
the experiment and report your findings.

    /* TODO */ 

=================================== P4Q2 end ===================================



================================== P5Q1 start ==================================
Briefly describe the advantages and disadvantages of a larger HZ.

    /* TODO */ 

=================================== P5Q1 end ===================================

================================== P5Q2 start ==================================
What is the HZ currently configured for your running Linux system?

    /* TODO */ 

=================================== P5Q2 end ===================================

================================== P5Q3 start ==================================
What are jiffies? Explain the relationship between jiffies, HZ, and time.

    /* TODO */ 

=================================== P5Q3 end ===================================

================================== P5Q4 start ==================================
Find the current value of jiffies in your system.
    - In minutes, how much time does this jiffies value represent?
    - Does it match the uptime reported by the uptime command? (Hint: it 
      doesn’t.) Please give the formula to convert jiffies to the current 
      (real) uptime, in minutes.
    - Why does this large difference exist? (Hint: in 32-bit Linux systems,
      jiffies is a 32-bit value.)

    /* TODO */ 

=================================== P5Q4 end ===================================

================================== P5Q5 start ==================================
What are Niffies? How do they differ from Jiffies?

    /* TODO */ 

=================================== P5Q5 end ===================================